#pragma kernel PhysicsCalc

struct PhysObj
{
    float3 position;
    float3 velocity;
    bool isStatic;
};

float dt;
float3 bounds;
float3 center;
float3 gravity;
uint objectsCount;
float sphereRadius;

float3 explosionCenter;
bool applyExplosion;

float explosionForce;
float explosionRadius;
float3 rocketPosition;
float rocketDetectRadius;

RWStructuredBuffer<uint> rocketArgs;
RWStructuredBuffer<PhysObj> physObjects;

void ApplyExplosion(inout PhysObj obj, float3 explCenter, float explRadius)
{
    float3 dir = obj.position - explCenter;
    float dist = length(dir);

    if (dist < explRadius)
    {
        obj.isStatic = false;

        dir = normalize(dir);
        obj.velocity += dir * explosionForce * (1.0f - dist / explosionRadius);
    }
}

void ResolveRocketExplosion(inout PhysObj obj)
{
    if(obj.isStatic == false) return;
    
    if (rocketArgs[0] != 1) return;

    float3 dir = obj.position - rocketPosition;
    float dist = length(dir);

    if (dist < rocketDetectRadius)
    {
        obj.isStatic = false;
        
        dir = normalize(dir);
        obj.velocity += dir * explosionForce * (1.0f - dist / explosionRadius);
    }
}

void ApplyBounds(inout PhysObj obj)
{
    float consumptionFactor = 0.5f;

    // Проверка и корректировка по X
    if (obj.position.x < center.x - bounds.x)
    {
        obj.position.x = center.x - bounds.x;
        obj.velocity.x *= -consumptionFactor;
    }
    else if (obj.position.x > center.x + bounds.x)
    {
        obj.position.x = center.x + bounds.x;
        obj.velocity.x *= -consumptionFactor;
    }

    // Проверка и корректировка по Y
    if (obj.position.y < center.y - bounds.y)
    {
        obj.position.y = center.y - bounds.y;
        obj.velocity.y *= -consumptionFactor;
    }
    else if (obj.position.y > center.y + bounds.y)
    {
        obj.position.y = center.y + bounds.y;
        obj.velocity.y *= -consumptionFactor;
    }

    // Проверка и корректировка по Z
    if (obj.position.z < center.z - bounds.z)
    {
        obj.position.z = center.z - bounds.z;
        obj.velocity.z *= -consumptionFactor;
    }
    else if (obj.position.z > center.z + bounds.z)
    {
        obj.position.z = center.z + bounds.z;
        obj.velocity.z *= -consumptionFactor;
    }
}

void Move(inout PhysObj physObj)
{
    if (physObj.isStatic == false)
    {
        physObj.velocity += gravity * dt;
        physObj.position += physObj.velocity * dt;
    }
}

void ResolveCollision(inout PhysObj obj1, inout PhysObj obj2)
{
    float3 dir = obj1.position - obj2.position;
    float dist = length(dir);

    float radius = sphereRadius + sphereRadius;

    if (dist < radius)
    {
        float3 normDir = normalize(dir);
        float penetrationDepth = radius - dist;
        float3 correction = normDir * (penetrationDepth / 2.0);

        if (obj1.isStatic == false)
        {
            obj1.position += correction;
            obj1.velocity -= normDir * dot(obj1.velocity, normDir);
        }

        if (obj2.isStatic == false)
        {
            obj2.position -= correction;
            obj2.velocity -= normDir * dot(obj2.velocity, normDir);
        }
    }
}

void CheckForCollisions(uint index, PhysObj physObj)
{
    for (uint i = 0; i < objectsCount; ++i)
    {
        if (i == index) continue;

        PhysObj otherObj = physObjects[i];

        if (otherObj.isStatic) continue;

        ResolveCollision(physObj, otherObj);

        physObjects[i] = otherObj;
    }
}

[numthreads(256, 1, 1)]
void PhysicsCalc(uint3 id : SV_DispatchThreadID)
{
    uint index = id.x;

    if (index >= objectsCount)
        return;

    PhysObj physObj = physObjects[index];
    
    Move(physObj);
    ApplyBounds(physObj);
    CheckForCollisions(index, physObj);
    ResolveRocketExplosion(physObj);

    physObjects[index] = physObj;
}
